from Crypto.Util.number import *
from gmpy2 import isqrt

p_plus_q = 19560566035650760634714185509895263537781582834172074940953521882988957159426739104516223761380901318444224792429693464089660274068363629508803944077638246
n = 91266063171123114433199295367466507668601834169552304203475794877887240725905699776290344943395098001049827687470628259744987622154736664517263507463717015670128076023427941344900690077601761109365502294857707959568839804638422192441080930777688104479844315325541516885521698446583870661649417192884676540453
E = 8500730670309587711008083215035854350939663360223213151132304563014812126299494497472445000310009298790798353590111797568260969644794245191208068031148683703059843690297738976639799193399046297285775019970408266961777267878245265848419910432327066952057073658796161596477808613216315618710401752190952432648
c = 65669212527124353385847242378424758290391365601420562595508962668063893313059407239606455704037844336090583009048716221812880991841899570701790261212435214482043423885919952511566340962676215456822247085932982495729300116349846575098502477498199480777998877289467277463860155421287905027894619574281311776939

p_minus_q = isqrt(p_plus_q**2 - 4 * n)
p = (p_minus_q + p_plus_q) // 2
q = (p_plus_q - p_minus_q) // 2
assert p * q == n
phi = (p - 1) * (q - 1)
d1 = inverse(c, phi)
e = pow(E, d1, n)
print(e)
e = e // 2
d2 = inverse(e, phi)
m = isqrt(pow(c, d2, n))
print(long_to_bytes(m))
