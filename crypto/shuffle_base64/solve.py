ciphertext = "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"


def shuffle(charset: str, shift):
    # 将字符映射表循环右移4位
    charset = list(charset)
    charset = charset[-shift:] + charset[:-shift]
    charset = "".join(charset)
    return charset


def base64decode(cipher: str, charset: str) -> str:
    binstr = ""
    for i in cipher:
        if i == "=":
            binstr += "00"
        else:
            temp = charset.find(i)
            if temp == -1:
                continue
            temp = (bin(temp))[2:].zfill(6)
            binstr += temp
    binstr = [binstr[i : i + 8] for i in range(0, len(binstr), 8)]
    binstr = bytes([int(_, 2) for _ in binstr])
    text = binstr.decode()  # 从转换的字节中解码
    return text


charset = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"
for _ in range(16):
    for s in range(64):
        charset_ = shuffle(charset, s)
        try:
            ciphertext = base64decode(ciphertext, charset_)
            # print(s, end="")
            break
        except:
            continue

print()
flag = base64decode(ciphertext, charset)
print(flag)
