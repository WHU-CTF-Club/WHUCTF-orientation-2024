from Crypto.Cipher import AES
from Crypto.Random import get_random_bytes


def AES_encrypt(flag: bytes, key: bytes):
    cipher = AES.new(key, AES.MODE_ECB)
    return cipher.encrypt(flag)


def xor(a: bytes, b: bytes):
    assert len(a) == len(b)
    return bytes([x ^ y for x, y in zip(a, b)])


flag = b"WHUCTF{?????????????}"
# encrypt flag and give you the tail
key = get_random_bytes(16)
C = AES_encrypt(flag, key)
print(C[-16:])

# encrypt key and you will never get it
hint = []
for i in range(0, len(C) - 16):
    c0 = C[i : i + 16]
    c1 = C[i + 1 : i + 17]
    key = xor(AES_encrypt(key, c0), c1)
    hint.append(xor(key, c0)[-15:])
print(hint)


"""
b'\x84U\xf6\xb7\x86\xd3Zx\xc0\xfc\xf9\xe8A\xb1\xfel'
[b'\xf0)\xc2\x1b\xe7\xd0\xb2\xde\x95\xd5\x92\xf8\xa8E\xd8', b'\xa7\x87c\xe5D\xa2\x95\x05\x10\x97\xaf\xe8B\x1fy', b'\x8c\xcaC\x7f\xcd>>\x1a\x83<~\xed\xd2\x89\r', b'\t\xcda\xd9\xa0\xb7\xea\x1a\x9e\x07)\xd4`\xe9\xcf', b'\xf8\x7f5\x86\xc8\xc4n`\xad\xa8\x19\xc5\xbe\xfa\xfd', b'\x88z\x86\xd1\x1f\xa3k\x1a\xa1*nuy\xf3\x08', b'\x90\x8f\xdd\t@\xbb\xc25\xba\x82\xd6\xf1F*+', b'\xdbo\xe9^\xfc\xc0\xdb\xce\xc7\xae\xb7\x16\x11\xfbv', b'\x03\xaf\x81\x90\x0e0\x90\xactc\x92\x91\x92Y\xcf', b'\x9a\xd1\xea\xc4,xO!\x03\xc7^\xf2z\xaf:', b'\x1bY\x91\x96\xa9\xf2\xf7m\xe4\xcc\x7f2uB`', b'\xc9=Fku7\x9du\tT\xc1p\xd0\xbf\x86', b'K\x07\xab\xb1\x88\x81\x88\x17A\xf7\xa8\x0c\x92\xe2a', b'\xfb\xba\xa9\xe3\xd6\xba\xfcF\r\xd6\xd3\x1d\xe4\x91\x9b', b'\xb5E\xc1UG\x0c\x19\x80\xc8G\xd0\xe2\x9a`\x8f', b'V\xb8C\x17}\xd3\xe9;Z$\x82#\xcb\x1c\x95']
"""
